package mun.concurrent.assignment.two;

import java.util.ArrayList;
import java.lang.*;
import java.util.List;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class ElevatorArray implements Runnable {
    List<Elevator> elevators = new ArrayList<>();
    List<Rider> riders = new ArrayList<>();
    int numElevators;
    ReentrantLock elevatorLock = new ReentrantLock();
    Condition riderAdded = elevatorLock.newCondition();

    public ElevatorArray (int numElevators, int capacity){

        this.numElevators= numElevators;

        // Create elevators
        for(int i = 0; i < numElevators; i++) {
            elevators.add( new Elevator(capacity, 0, 1));
        }

    }

    public ElevatorArray(){

    }

    public void addRiderToRiders(Rider rider) {
        elevatorLock.lock();

        riders.add(rider);
        riderAdded.signalAll();

        elevatorLock.unlock();
    }

    // Assigns an elevator to a rider generated by Factory
    public Elevator getElevatorIndex(Rider rider){
        Status direction;

        //Find direction
        if (rider.dest_floor - rider.start_floor > 0){
            direction = Status.UP;
        }
        else{
            direction = Status.DOWN;
        }

        //Find elevators with status stationary AND same direction
        ArrayList<Elevator> newArray = new ArrayList<>();
        for (int i = 0; i<numElevators; i++){
            Elevator elevator = elevators.get(i);
            if (elevator.getStatus() == Status.STATIONARY){
                newArray.add(elevator);
            }
            else if (elevator.getStatus() == direction){
                if(direction == Status.UP){
                    if(elevator.getCurrentFloor() < rider.start_floor){
                        newArray.add(elevator);
                    }
                }
                else if (direction == Status.DOWN){
                    if(elevator.getCurrentFloor() > rider.start_floor){
                        newArray.add(elevator);
                    }
                }
            }
        }

        // Find |elevator.current_floor - rider.start_floor|
        int min_difference = 5; // since maximum difference is 4
        int current_difference;
        int index=0;
        for (int i = 0; i< newArray.size(); i++) {
            current_difference = Math.abs(newArray.get(i).getCurrentFloor() - rider.start_floor);
            if(current_difference < min_difference){
                min_difference = current_difference;
                index = i;
            }
        }
        // TODO: make an array of differences in case 2 elevators are equidistant from rider

        return elevators.get(index);
    }


    public void add(Elevator elevator) {
        elevators.add(elevator);
    }

    // We dont necessarily have to tie one thread for each elevator, it can just be 4 random threads that all get called
    // when a rider gets added somewhere
    // The common object they share access to is the ElevatorArray

    public void run(){
        // move the elevator there

        // but problem here is how to know which elevator has the rider added

        // Alternatively can have assigning of elevators here,
        try {
            elevatorLock.lockInterruptibly();
            while (riders.size()==0){
                riderAdded.await();
            }

            System.out.println("Current Thread: " + Thread.currentThread().getName());
            Rider rider = riders.get(0);
            riders.remove(rider);
            Elevator elevator = getElevatorIndex(rider);
            elevator.addRiderToElevQueue(rider);
            elevator.move();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        finally {
            elevatorLock.unlock();
        }


        // Can have a list of riders, condition can be while riders == 0 wait
        // Then once there is a rider, signalAll, one thread will go there and remove rider to decrement list
        // Then it will call the scheduleRider method
        // Then it will call the run method in elevator

    }
}
