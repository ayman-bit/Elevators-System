package mun.concurrent.assignment.two;

import java.util.ArrayList;
import java.lang.*;

public class ElevatorArray {
    ArrayList<Elevator> elevators = new ArrayList<Elevator>();
    int numElevators;
    public ElevatorArray (int numElevators, int capacity){

        this.numElevators= numElevators;

        for(int i = 0; i < numElevators; i++) {
            elevators.add( new Elevator(capacity, 0, 1));
        }

    }

    // Assigns an elevator to a rider generated by Factory
    public void scheduleRider(Rider rider){
        String direction; // Make an enum

        //Find direction
        if (rider.dest_floor - rider.start_floor > 0){
            direction = "up";
        }
        else{
            direction = "down";
        }

        //Find elevators with status stationary AND same direction
        ArrayList<Elevator> newArray = new ArrayList<>();
        for (int i = 0; i<numElevators; i++){
            Elevator elevator = elevators.get(i);
            if (elevator.getStatus() == "stationary"){
                newArray.add(elevator);
            }
            else if (elevator.getStatus() == direction){
                if(direction == "up"){
                    if(elevator.getCurrentFloor() < rider.start_floor){
                        newArray.add(elevator);
                    }
                }
                else if (direction == "down"){
                    if(elevator.getCurrentFloor() > rider.start_floor){
                        newArray.add(elevator);
                    }
                }
            }
        }

        // Find |elevator.current_floor - rider.start_floor|
        int min_difference = 5; // since maximum difference is 4
        int current_difference;
        int index=0;
        for (int i = 0; i< newArray.size(); i++) {
            current_difference = Math.abs(newArray.get(i).getCurrentFloor() - rider.start_floor);
            if(current_difference < min_difference){
                min_difference = current_difference;
                index = i;
            }
        }
        // TODO: make an array of differences in case 2 elevators are equidistant from rider

        elevators.get(index).addRider(rider);

    }


}
